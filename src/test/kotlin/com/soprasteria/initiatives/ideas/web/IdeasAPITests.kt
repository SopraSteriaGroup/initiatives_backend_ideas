package com.soprasteria.initiatives.ideas.web

import com.soprasteria.initiatives.ideas.repository.IdeaRepository
import com.soprasteria.initiatives.ideas.utils.createIdea
import io.restassured.RestAssured
import io.restassured.RestAssured.given
import io.restassured.builder.RequestSpecBuilder
import io.restassured.specification.RequestSpecification
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.web.server.LocalServerPort
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.restdocs.JUnitRestDocumentation
import org.springframework.restdocs.operation.preprocess.Preprocessors.*
import org.springframework.restdocs.payload.PayloadDocumentation.*
import org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document
import org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.documentationConfiguration
import org.springframework.restdocs.restassured3.operation.preprocess.RestAssuredPreprocessors.modifyUris
import org.springframework.test.context.junit4.SpringRunner

@RunWith(SpringRunner::class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
open class IdeasAPITests {

    val defaultName = "setup"
    lateinit var spec: RequestSpecification
    @Rule @JvmField val restDocumentation = JUnitRestDocumentation()
    @LocalServerPort var port: Int = 0
    @Autowired lateinit var ideaRepository: IdeaRepository

    @Before
    fun setUp() {
        ideaRepository.deleteAll().block()
        ideaRepository.insert(createIdea(defaultName)).block()
        ideaRepository.insert(createIdea("$defaultName 2")).block()
        RestAssured.port = port
        spec = RequestSpecBuilder().addFilter(documentationConfiguration(restDocumentation)).build()
    }

    @Test
    fun `should publish all ideas`() {
        given(spec)
                .accept(MediaType.APPLICATION_JSON_VALUE)
                .filter(document("findAllIdeas", preprocessRequest(modifyUris().port(8080)), preprocessResponse(prettyPrint()),
                        responseFields(fieldWithPath("[]").description("An array of ideas"))
                                .andWithPrefix("[].", ideaDTOFields().apply { addAll(applyPathPrefix("contact.", contactDTOFields())) })
                ))
                .`when`().get("/api/ideas")
                .then().statusCode(HttpStatus.OK.value())
    }

    private fun ideaDTOFields() = mutableListOf(
            fieldWithPath("id").type(String::class.java).description("The idea's technical id generated by MongoDB"),
            fieldWithPath("name").type(String::class.java).description("The idea's name"),
            fieldWithPath("pitch").type(String::class.java).description("The idea's pitch explaining what this idea is about"),
            fieldWithPath("category").type(String::class.java).description("The idea's category TODO ..."),
            fieldWithPath("logo").type(String::class.java).description("The idea's logo URL"),
            fieldWithPath("progress").type(String::class.java).description("The idea's progress could be any value of type IdeaProgress"),
            fieldWithPath("likes").type(Int::class.java).description("The idea's numbers of likes"),
            fieldWithPath("contact").description("The idea's contact")
    )

    private fun contactDTOFields() = listOf(
            fieldWithPath("mail").type(String::class.java).description("The contact's mail address"),
            fieldWithPath("website").type(String::class.java).description("The idea's website URL"),
            fieldWithPath("slack").type(String::class.java).description("The idea's slack URL"),
            fieldWithPath("github").type(String::class.java).description("The idea's github URL"),
            fieldWithPath("trello").type(String::class.java).description("The idea's trello URL")
    )
}